---
- hosts: all
  vars:
    rock_debug: "{{ lookup('env', 'DEBUG') }}"
    http_proxy: "{{ lookup('env','http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
  tasks:
  - name: Get default settings
    include_vars: rocknsm_config.dist.yml
  - name: Get OS specific settings
    include_vars: "{{ item }}"
    with_first_found:
      - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
      - "{{ ansible_distribution }}.yml"
    tags: vars
  - name: Apply override settings, if available
    include_vars: /etc/rocknsm/config.yml
    ignore_errors: true
    failed_when: false
  - name: Debug variables
    include: debug.yml
    when: rock_debug is defined and rock_debug

    ######################################################
    ################# Data Directory #####################
    ######################################################
    ###############
    ##### NOTE ####
    ###############
    # You will want to remount this to your "good" storage after the build.
    # This is just to make sure all the paths in the configs are proper.
    ###############  - file:
  - name: Create ROCK data dir
    file:
      path: "{{ rock_data_dir }}"
      mode: 0755
      owner: "{{ rock_data_user }}"
      group: "{{ rock_data_group }}"
      state: directory

  - name: Create ROCK NSM directory
    file:
      path: "{{ rocknsm_dir }}"
      mode: 0755
      owner: root
      group: root
      state: directory


    #######################################################
    ############# Install/Remove Packages #################
    #######################################################
  - name: Configure packages
    set_fact:
      rocknsm_package_list: "{{ rocknsm_package_list }} + [ '{{ item.pkg }}']"
    when: (item.test is undefined) or (item.test)
    with_items:
      - { pkg: bro, test: "{{with_bro}}", state: installed }
      - { pkg: bro-plugin-af_packet, test: "{{with_bro}}", state: installed }
      - { pkg: bro-plugin-kafka, test: "{{(with_bro and with_kafka)}}", state: installed }
      - { pkg: chrony, state: installed }
      - { pkg: daq, test: "{{with_snort}}", state: installed }
      - { pkg: docker-ce, test: "{{with_docker}}", state: installed }
      - { pkg: elasticsearch, test: "{{with_elasticsearch}}", state: installed }
      - { pkg: filebeat, test: "{{with_suricata or with_fsf}}", state: installed }
      - { pkg: firewalld, state: installed }
      - { pkg: fsf, test: "{{with_fsf}}", state: installed }
      - { pkg: kafka, test: "{{with_kafka}}", state: installed }
      - { pkg: kafkacat, test: "{{with_kafka}}", state: installed }
      - { pkg: kibana, test: "{{with_kibana}}", state: installed }
      - { pkg: logstash, test: "{{with_logstash}}", state: installed }
      - { pkg: postfix, state: installed }
      - { pkg: nginx, test: "{{with_nginx}}", state: installed }
      - { pkg: snort, test: "{{with_snort}}", state: installed }
      - { pkg: stenographer, test: "{{with_stenographer}}", state: installed }
      - { pkg: suricata, test: "{{with_suricata}}", state: installed }
      - { pkg: zookeeper, test: "{{with_zookeeper}}", state: installed }


  - name: Install packages
    yum:
      name: "{{ item.pkg }}"
      state: "{{ item.state }}"
    when: (item.test is undefined) or (item.test)
    with_items:
      - { pkg: "{{ rocknsm_package_list }}", state: installed }

  - name: Ensure cache directory exists
    file:
      dest: "{{ rock_cache_dir }}"
      state: directory
      mode: 0755

    #######################################################
    #####################  Firewall  ######################
    #######################################################
  - name: Enable and start firewalld
    service:
      name: firewalld
      enabled: yes
      state: started

  - name: Configure firewalld
    firewalld:
      port: "{{ item[1].port }}"
      source: "{{ item[0] }}"
      permanent: yes
      state: enabled
      immediate: yes
    when: (item[1].test is undefined) or item[1].test
    with_nested:
      - "{{ rock_mgmt_nets }}"
      -
        - { port: "22/tcp" }
        - { port: "443/tcp",  test: "{{ with_kibana }}" }

    ######################################################
    ##################  GeoIP Databases  #################
    ######################################################
  - name: Configure GeoIP Update
    copy: src=GeoIP.conf dest=/etc/GeoIP.conf

    # There's an issue w/ geoipupdate when env is empty
  - name: Update GeoIP
    shell: >
      if [ "x$HTTP_PROXY" == "x" ]; then
          unset HTTP_PROXY;
      fi
      if [ "x$http_proxy" == "x" ]; then
          unset http_proxy;
      fi
      if [ "x$HTTPS_PROXY" == "x" ]; then
          unset HTTPS_PROXY;
      fi
      if [ "x$https_proxy" == "x" ]; then
          unset https_proxy;
      fi
      /usr/bin/geoipupdate
    args:
      creates: /usr/share/GeoIP/GeoLiteASNum.dat
    register: result
    failed_when: (result.rc != 0) and (result.rc != 1)

  - name: Create GeoIP symlinks
    file:
      src: "/usr/share/GeoIP/{{ item.src }}"
      dest: "/usr/share/GeoIP/{{ item.dest }}"
      force: yes
      state: link
    with_items:
      - { src: 'GeoLiteCity.dat', dest: 'GeoIPCity.dat' }
      - { src: 'GeoLiteCountry.dat', dest: 'GeoIPCountry.dat' }
      - { src: 'GeoLiteASNum.dat', dest: 'GeoIPASNum.dat' }
      - { src: 'GeoLiteCityv6.dat', dest: 'GeoIPCityv6.dat' }


    ######################################################
    #################  ROCKNSM Scripts  ##################
    ######################################################
  - name: Install rock start script
    copy:
      src: rock_start
      dest: /usr/local/bin/rock_start
      mode: 0700
      owner: root
      group: root

  - name: Install rock stop script
    copy:
      src: rock_stop
      dest: /usr/local/bin/rock_stop
      mode: 0700
      owner: root
      group: root

  - name: Install rock status script
    copy:
      src: rock_status
      dest: /usr/local/bin/rock_status
      mode: 0755
      owner: root
      group: root

  - name: Create rock script symlinks
    file:
      src: "/usr/local/bin/{{ item.src }}"
      dest: "/usr/sbin/{{ item.dest }}"
      force: yes
      state: link
    with_items:
      - { src: 'rock_start', dest: 'rock_start' }
      - { src: 'rock_stop', dest: 'rock_stop' }
      - { src: 'rock_status', dest: 'rock_status' }

  # Training mode / Service mode not needed for AF_PACKET
  ######################################################
  ############### ROCKNSM Customization ################
  ######################################################
  - name: Install ROCK NSM /etc/issue
    copy:
      src: etc-issue.in
      dest: /etc/issue.in
      mode: 0644
      owner: root
      group: root

  - name: NetworkManager ROCK NSM hook
    copy:
      src: nm-issue-update
      dest: /etc/NetworkManager/dispatcher.d/50-rocknsm-issue-update
      mode: 0755
      owner: root
      group: root

  #######################################################
  #####################  Handlers  ######################
  #######################################################
  handlers:
    - name: force sync time
      command: >
        chronyc -a 'burst 3/4'; sleep 5; chronyc -a makestep

    - name: configure monitor interfaces
      shell: >
        for intf in {{ rock_monifs | join(' ') }}; do
          /sbin/ifup ${intf};
        done

    - name: sshd restart
      service: name=sshd state=restarted

    - name: es maintenance
      command: /usr/local/bin/es_cleanup.sh

    - name: reload broctl
      service: name=broctl state=restarted

    - name: create kafka bro topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic bro-raw
           --partitions 1

    - name: create kafka suricata topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic suricata-raw
           --partitions 1

    - name: create kafka fsf topic
      command: >
        /opt/kafka/bin/kafka-topics.sh
           --zookeeper 127.0.0.1:2181
           --create
           --replication-factor 1
           --topic fsf-raw
           --partitions 1

    - name: reload systemd
      command: systemctl daemon-reload

    - name: Restart Logstash
      service:
        name: logstash
        state: restarted

    - name: Restart Filebeat
      service:
        name: filebeat
        state: restarted

    - name: Enable and start nginx
      service:
        name: nginx
        state: "{{ 'started' if enable_nginx else 'stopped' }}"
        enabled: "{{ enable_nginx }}"
      when: with_nginx


  environment:
   http_proxy:  "{{ http_proxy }}"
   https_proxy: "{{ https_proxy }}"
   HTTP_PROXY:  "{{ http_proxy }}"
   HTTPS_PROXY: "{{ https_proxy }}"
